// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  fullName      String
  email         String   @unique
  document      String?  @unique
  phone         String?
  password      String?
  role          Int?     @default(2)
  status        Int?     @default(3)
  activationKey String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  avatarURL     String?

  // Relações
  stockMovements  StockMovement[] @relation("StockMovementUser")
  updatedProducts Product[]       @relation("ProductUpdatedBy")
}

enum Unit {
  UN
  M2
  KG
}

model Product {
  id            String   @id @default(cuid())
  name          String
  brand         String
  unit          Unit
  description   String?
  status        Int
  marginPercent Decimal? @db.Decimal(5, 2) // 30.00 = 30%
  // NOVOS (cache p/ performance + cálculo rápido)
  stockOnHand   Decimal  @default(0) @db.Decimal(14, 4)
  avgUnitCost   Decimal  @default(0) @db.Decimal(14, 6)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  updatedBy     String?
  updatedByUser User?    @relation("ProductUpdatedBy", fields: [updatedBy], references: [id])

  stockMovements StockMovement[]
}

enum StockMovementType {
  PURCHASE // Entrada por compra
  SALE // Saída por venda
  ADJUST_IN // Ajuste positivo
  ADJUST_OUT // Ajuste negativo
  RETURN_TO_SUPPLIER // Devolução ao fornecedor (saída)
  RETURN_FROM_CLIENT // Devolução do cliente (entrada)
  TRANSFER_OUT // (mantido por compatibilidade, mas não usaremos)
  TRANSFER_IN // (idem)
}

enum SupplierType {
  CNPJ
  CPF
}

model Supplier {
  id             String          @id @default(cuid())
  type           SupplierType    @default(CNPJ)
  name           String
  fantasyName    String?
  document       String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  status         Int             @default(1)
  stockMovements StockMovement[]
}

model StockMovement {
  id            String            @id @default(cuid())
  productId     String
  product       Product           @relation(fields: [productId], references: [id])
  type          StockMovementType
  quantity      Decimal           @db.Decimal(14, 4) // sempre positiva
  unitCost      Decimal?          @db.Decimal(14, 6) // obrigatório em entradas
  unitSalePrice Decimal?          @db.Decimal(14, 6) // opcional em saídas
  totalCost     Decimal?          @db.Decimal(18, 6) // custo lançado (entrada) ou CMV (saída)
  totalRevenue  Decimal?          @db.Decimal(18, 6) // receita (saída)
  marginPct     Decimal?          @db.Decimal(7, 4)
  description   String?
  userId        String
  user          User              @relation("StockMovementUser", fields: [userId], references: [id])
  supplierId    String?
  supplier      Supplier?         @relation(fields: [supplierId], references: [id])
  originType    String? // "ORDER","INVOICE","MANUAL","REVERSAL"
  originId      String?
  reversedById  String?
  reversedAt    DateTime?
  createdAt     DateTime          @default(now())

  @@index([productId, createdAt])
}
